//Seqeunce Read
title=Reading line with lineReader
obj=<<class>>\nAnalysisRunner~runner
obj=reader\n:lineRead~reader CREATED_LATER
obj=<<class>>\nDurationTimer~timer
obj=line\n:Line~line CREATED_LATER
obj=point\n:Point~point CREATED_LATER
obj=lines\n:List<Line>~lines

runner->runner + : readLineFromFile(); on=runner

tick=
runner -> reader : create

tick=
combinedFragment=loop~outer
    reader:[nextLine()]
    reader -> line: create

    combinedFragment=loop~inner
    reader:[nextPoint()]
    
    tick=
    runner -> timer: measureDurationForCallInMs() ;on=runner
    timer -> reader: getX() ;on=reader
    reader .> timer: X ;off=reader
    timer .> runner : Tuple<X, duration GetX()> ; off=runner
    
    tick=
    runner -> timer: measureDurationForCallInMs() ; on=runner 
    timer -> reader : getY() ;on=reader
    reader .> timer: Y ; off=reader
    timer .> runner : Tuple<Y, duration GetY()> ; off=runner
    
    runner->point:create(X, Y)
    runner->line: add(point)
    --=inner
    runner -> lines : add(line) ; on=runner
--=outer




//measure slope and intercept
title=measure Slope and Intercept
obj=<<class>>AnalysisRunner~runner
obj=line:Line~line
obj=mapClass2LineClassStatistics\n:Map<Integer, LineClassStatistics>~map
obj=<<class>>\nDurationTimer~timer
obj=lcs:LineClassStatistics~lcs

combinedFragment=foreach~for
runner:[Line in lines]
runner -> line: length

line .> runner: return length
runner->map:get(length)

map.>runner: return lcs

runner -> timer : measureDurationForCallInNs()
timer->line:slope()
timer.>runner:returns timingSlopeAndResult
runner -> timer : measureDurationForCallInNs()
timer->line:intercept()
timer.>runner:returns timingInterceptAndResult

runner -> lcs : add(slope)
runner -> lcs : add(intercept)
--


//
title=AnalysisRunner.main(String[] args)
obj=<<class>>\nAnalysisRunner~runner EXECUTION

combinedFragment=ref readline~
--

combinedFragment=ref measureSlopeAndIntercept~
--

combinedFragment=ref calcMetrics~
--

combinedFragment=ref LineClassStatistics.calcAvgs~
--

runner -> runner + : printFormatted(formatted: String) ; on=runner
runner -> runner + : format() ; on=runner
runner .> runner + : formatted output; off=runner
